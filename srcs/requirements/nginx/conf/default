##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

##
# listen 443 ssl
# listen [::]:443 ssl
# tells nginx to listen for HTTPS connections on port 443 for both IPv4 and IPv6 address

##
# server_name welim.42.fr
# specifies the server name

## SSL/TLS config
# ssl_certificate: Specifies the path to the SSL certificate file.
# ssl_certificate_key: Specifies the path to the private key file associated with the certificate.
# ssl_protocols: Specifies the SSL/TLS protocols that are allowed. Here, it's set to only allow TLS 1.3, which is the latest and most secure version.

## index index.php
# This sets the default index file to index.php if a directory is requested.

## root /var/www/html
# This sets the root directory for the server, where it will look for files to serve.

## Root location
# This block handles requests to the root URL (/). The try_files tries to serve the requested URI as a file or directory. If neither exists, it forwards the request to index.php, passing any query string arguments.

## PHP Files location
# location ~ \.php$: This block handles requests for PHP files.
# try_files $uri =404;: Tries to serve the requested file. If it doesn't exist, returns a 404 error.
# fastcgi_split_path_info ^(.+?\.php)(|/.*)$;: Splits the URI to separate the script name and path info, useful for PHP-FPM processing.
# fastcgi_pass wordpress:9000;: Forwards the request to a FastCGI server running at wordpress:9000. This implies that there's a PHP-FPM service running, likely in a Docker container named wordpress.
# fastcgi_index index.php;: Sets the default index file for FastCGI processing.
# include fastcgi_params;: Includes the standard FastCGI parameters.
# fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;: Sets the full path to the script file that should be executed.
# fastcgi_param PATH_INFO $fastcgi_path_info;: Passes the path info to the FastCGI server.



server {
	listen 443 ssl;
	listen [::]:443 ssl;

	server_name welim.42.fr;

	ssl_certificate /etc/ssl/certs/welim.crt;
	ssl_certificate_key /etc/ssl/private/welim.key;
	ssl_protocols TLSv1.3;

	index index.php;

	root /var/www/html;
	
	location / {
		try_files $uri $uri/ /index.php$is_args$args;
	}
	
	location ~ \.php$ {
		try_files $uri = 404;
		fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
		fastcgi_pass wordpress:9000;
		fastcgi_index index.php;
		include fastcgi_params;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param PATH_INFO $fastcgi_path_info;
	}
}

